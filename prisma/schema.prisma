// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role
  gyms      Gym[]     @relation("VendorGyms")
  bookings  Booking[]
  createdAt DateTime  @default(now())
}

model Gym {
  id          String   @id @default(uuid())
  name        String
  description String
  location    String
  vendorId    String
  vendor      User     @relation("VendorGyms", fields: [vendorId], references: [id])
  slots       Slot[]
  createdAt   DateTime @default(now())
}

model Slot {
  id        String   @id @default(uuid())
  date      DateTime
  time      String
  capacity  Int
  gymId     String
  gym       Gym     @relation(fields: [gymId], references: [id])
  bookings  Booking[]
  createdAt DateTime @default(now())
}

model Booking {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  slotId    String
  slot      Slot           @relation(fields: [slotId], references: [id])
  status    BookingStatus  @default(PENDING)
  payment   Payment?
  createdAt DateTime       @default(now())
}

model Payment {
  id         String         @id @default(uuid())
  bookingId  String         @unique
  booking    Booking        @relation(fields: [bookingId], references: [id])
  amount     Float
  status     PaymentStatus
  paidAt     DateTime       @default(now())
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
